<?php

/**
 * @file
 * Contains Drupal\group\group.module
 */

use Drupal\group\Plugin\GroupContentEnablerHelper;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function group_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.group_type.content_plugins':
      return '<p>' . t('Entities that can be added to this group type.') . '</p>';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function group_element_info_alter(array &$types) {
  // Attach our extra CSS for toolbar icons.
  if (isset($types['toolbar'])) {
    $types['toolbar']['#attached']['library'][] = 'group/toolbar';
  }
}

/**
 * Implements hook_theme().
 */
function group_theme() {
  return array(
    /*'group' => array(
      'render element' => 'elements',
    ),*/
    'group_add_list' => array(
      'variables' => array('group_types' => NULL),
    ),
  );
}

/**
 * Prepares variables for list of available group type templates.
 *
 * Default template: group-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - group_types: An array of group types.
 *
 * @see group_add_page()
 */
function template_preprocess_group_add_list(&$variables) {
  $variables['types'] = array();

  if (!empty($variables['group_types'])) {
    foreach ($variables['group_types'] as $type) {
      $variables['types'][$type->id()] = array(
        'type' => $type->id(),
        'add_link' => \Drupal::l($type->label(), new Url('entity.group.add_form', array('group_type' => $type->id()))),
        'description' => array(
          '#markup' => $type->getDescription(),
        ),
      );
    }
  }
}

/**
 * Implements hook_rebuild().
 */
function group_rebuild() {
  // Checks if there are any new enforced plugins to install.
  GroupContentEnablerHelper::installEnforcedPlugins();
}

/**
 * Implements hook_modules_installed().
 */
function group_modules_installed($modules) {
  // Checks if there are any new enforced plugins to install.
  GroupContentEnablerHelper::installEnforcedPlugins();
}
