services:
  group.permissions:
    class: 'Drupal\group\Access\GroupPermissionHandler'
    arguments: ['@module_handler', '@string_translation', '@controller_resolver']
  group.admin_path.route_subscriber:
    class: 'Drupal\group\Routing\GroupAdminRouteSubscriber'
    arguments: ['@config.factory']
    tags:
      - { name: 'event_subscriber' }
  group_content_type.breadcrumb:
    class: 'Drupal\group\Breadcrumb\GroupContentTypeBreadcrumbBuilder'
    tags:
      - { name: 'breadcrumb_builder', priority: 100 }
  access_check.group.add:
    class: 'Drupal\group\Access\GroupAddAccessCheck'
    arguments: ['@entity.manager']
    tags:
      - { name: 'access_check', applies_to: '_group_add_access' }
  access_check.group.permission:
    class: 'Drupal\group\Access\GroupPermissionAccessCheck'
    tags:
      - { name: 'access_check', applies_to: '_group_permission' }
#  cache_context.group.permissions:
#    class: Drupal\group\Cache\Context\GroupPermissionsCacheContext
#    arguments: ['@request_stack', '@current_user', '@user_permissions_hash_generator']
#    tags:
#      - { name: cache.context}
  plugin.manager.group_content_enabler:
    class: 'Drupal\group\Plugin\GroupContentEnablerManager'
    parent: 'default_plugin_manager'
# TODO Implement this (look at filter module).
# Prevent modules providing group content from being uninstalled.
#  group.uninstall_validator:
#    class: Drupal\group\GroupContentUninstallValidator
#    tags:
#      - { name: module_install.uninstall_validator }
#    arguments: ['@plugin.manager.group_content_enabler', '@entity.manager', '@string_translation']
#    lazy: true
